# Specify the AWS provider and region to deploy resources
provider "aws" {
  region = "ap-south-1"
}

# Create a Virtual Private Cloud (VPC) for isolating network resources
resource "aws_vpc" "medusa_vpc" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "medusa-vpc"
  }
}

# Create a public subnet inside the VPC
resource "aws_subnet" "medusa_subnet" {
  vpc_id                  = aws_vpc.medusa_vpc.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "ap-south-1a"
  map_public_ip_on_launch = true
  tags = {
    Name = "medusa-subnet"
  }
}

# Create an Internet Gateway to allow internet access
resource "aws_internet_gateway" "medusa_gw" {
  vpc_id = aws_vpc.medusa_vpc.id
}

# Create a route table and add a route to the Internet Gateway
resource "aws_route_table" "medusa_route_table" {
  vpc_id = aws_vpc.medusa_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.medusa_gw.id
  }
}

# Associate the route table with the subnet to enable internet access
resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.medusa_subnet.id
  route_table_id = aws_route_table.medusa_route_table.id
}

# Create a security group that allows inbound traffic on port 9000
resource "aws_security_group" "medusa_sg" {
  name        = "medusa-sg"
  description = "Allow HTTP and HTTPS"
  vpc_id      = aws_vpc.medusa_vpc.id

  # Inbound rule: Allow TCP traffic on port 9000 from anywhere
  ingress {
    from_port   = 9000
    to_port     = 9000
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Outbound rule: Allow all traffic to any destination
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Create an ECS Cluster to manage container workloads
resource "aws_ecs_cluster" "medusa_cluster" {
  name = "medusa-cluster"
}

# Define a Fargate-compatible ECS task that runs the Medusa container
resource "aws_ecs_task_definition" "medusa_task" {
  family                   = "medusa-task"
  requires_compatibilities = ["FARGATE"]
  network_mode             = "awsvpc"
  cpu                      = "512"
  memory                   = "1024"

  container_definitions = jsonencode([
    {
      name      = "medusa-container"
      image     = "medusajs/medusa:v1.11.3"
      essential = true
      portMappings = [
        {
          containerPort = 9000
          hostPort      = 9000
        }
      ]
    }
  ])
}

# Create an ECS service to run and manage the Medusa container on Fargate
resource "aws_ecs_service" "medusa_service" {
  name            = "medusa-service"
  cluster         = aws_ecs_cluster.medusa_cluster.id
  task_definition = aws_ecs_task_definition.medusa_task.arn
  launch_type     = "FARGATE"
  desired_count   = 1

  network_configuration {
    subnets         = [aws_subnet.medusa_subnet.id]
    security_groups = [aws_security_group.medusa_sg.id]
    assign_public_ip = true
  }

  depends_on = [aws_ecs_cluster.medusa_cluster]
}
